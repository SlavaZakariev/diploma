# This is a basic workflow to help you get started with Actions

name: CI/CD Pipeline for nginx-app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    tags: ["1*"]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_TAG: slavazakariev/nginx-app:1.0.0
  RELEASE_NAME: nginx-app:1.0.0
  NAMESPACE: monitoring

jobs:
  build-and-push:
    name: Build Docker image
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List files in the working directory
        run: |
          ls -la

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.21.0'

      - name: Extract version from tag or commit message
        run: |
          echo "GITHUB_REF: ${GITHUB_REF}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git log -1 --pretty=format:%B | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          fi
          if [[ -z "$VERSION" ]]; then
            echo "No version found in the commit message or tag"
            exit 1
          fi
          VERSION=${VERSION//[[:space:]]/}  # Remove any spaces
          echo "Using version: $VERSION"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Replace image tag in deployment.yaml
        run: |
          if [ ! -f ./deploy/deployment.yaml ]; then
            echo "deployment.yaml not found in the current directory"
            exit 1
          fi
          sed -i "s|image: nikulinms/nginx-static-app:.*|image: ${{ env.IMAGE_TAG }}:${{ env.VERSION }}|" ./deploy/deployment.yaml

      - name: Create kubeconfig
        run: |
          mkdir -p $HOME/.kube/

      - name: Authenticate to Kubernetes cluster
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "${KUBE_CONFIG_DATA}" | base64 --decode > ${HOME}/.kube/config
          kubectl config view
          kubectl get nodes

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f ./deploy/deployment.yaml
          kubectl get daemonsets -n monitoring
          kubectl get pods -n monitoring
          kubectl describe daemonset myapp -n monitoring
          kubectl describe service myapp-service -n monitoring
